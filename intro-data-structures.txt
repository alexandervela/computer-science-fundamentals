1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

A: parkAttendees = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

A: parkAttendees.push("Mary");

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

A: function findPerson(person) {
    for(var i = 0; i < parkAttendees.length; i++) {
        if (parkAttendees[i] == person) { 
          return i;
        }
    } return "Sorry " + person + " is not in line";
}

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

A: console.log(findPerson("Emily"); // returns "Sorry Emily is not in line"

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

A: parkAttendees.splice(1, 0, "Melissa");

f) If Patrick wants to leave the line, how would you delete him from the array?

A: parkAttendees.splice(3, 1);


2. Provide another real-world example that you can model using a data structure.

A: The names of the items on your wishlist on Amazon could be held in an array.

3. How would your data structure allow developers to access and manipulate the data?

A: My data structure can be accessed and manipulated by using JavaScript's built in array methods. Adding items you also want and removing items you've since purchased would consist of using pop(), push(), shift(), unshift(), and/or splice().