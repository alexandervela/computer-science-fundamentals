1. What are some pros and cons of using linked lists instead of arrays?

A:
PROS - More efficient than array at storing without depleting precious memory.
CONS - Accessing a specific node is less efficient than an array since there are no indexes and the linked list much search through each node until it reaches the desired node.

2. Come up with a real world example of a linked list.

A: A Scavenger Hunt, each item(node) on your hunt directs you to the location of another item(node) until you reach your destination(target node).

Programming Questions

You may program the following questions in any language of your choice (JavaScript, pseudocode, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

A:
```
LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   *SET current node to current.next*
   *SET current.next to node*
 }
}
```

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

A:
```
function LinkedList() {
    this.head = null;
}

LinkedList.prototype.push = function(val){
    var node = {
       value: val,
       next: null
    }
    if(!this.head){
      this.head = node;      
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }

LinkedList.prototype.removeDuplicates = function() {
if (!this.head || !this.head.next) {
      console.log("No duplicates found.");
      return;
    }
    var hash = {};
    var node1 = this.head;
    var node2 = node1.next;
    hash[node1.value] = true;
    while (node2) {
        var value = node2.value;
        if (hash[value]) {
            node1.next = node2.next;
        } else {
            hash[value] = true;
            node1 = node2;
        }
        node2 = node2.next;
    }
}

var list = new LinkedList();
list.push(10);
list.push(20);
list.push(30);
list.push(30);
list.push(10);
list.removeDuplicates();
console.log(list.head.next.next);
```

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

A:
```
function LinkedList() {
  this.head = null;
} 

LinkedList.prototype.push = function(val){
    var node = {
       value: val,
       next: null
    }
    if(!this.head){
      this.head = node;      
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }

LinkedList.prototype.reverse = function() {
  var current = this.head;
  var next = null;
  var previous = null;
  
  while(current) {
    next = current.next;
    
    current.next = previous;
    
    previous = current;
  
    current = next;
  }
  this.head = previous;
}

var list = new LinkedList();
list.push(10);
list.push(20);
list.push(30);
list.reverse();
console.log(list.head.next.next); //10
```